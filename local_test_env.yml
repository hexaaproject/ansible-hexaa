- name: Local environment for testing HEXAA
  hosts: local
  tags: [env]
  vars:
    IDP1_DOMAIN: "idp1.{{ LOCAL_DOMAIN }}"
    IDP2_DOMAIN: "idp2.{{ LOCAL_DOMAIN }}"
    SIMPLESAMLPHP_ADMIN_PASSWORD: Pass123
    SIMPLESAMLPHP_SECRET_SALT:    FVZCYRFNZYCUC_FRPERG_FNYG

    MDX_DOMAIN: "metadata.{{ LOCAL_DOMAIN }}"
    MDX_URL:   "{{ LOCAL_PROTO }}://{{ MDX_DOMAIN }}:{{ LOCAL_PORT }}"
    DS_DATADIR: "{{ playbook_dir }}/local_files/ds"
    DS_METADATA_SOURCES:
      - "{{ LOCAL_PROTO }}://{{ SP1_DOMAIN }}/Shibboleth.sso/Metadata"
      - "{{ LOCAL_PROTO }}://{{ SP2_DOMAIN }}/Shibboleth.sso/Metadata"
      - "{{ LOCAL_PROTO }}://{{ IDP1_DOMAIN }}/simplesaml/saml2/idp/metadata.php"
      - "{{ LOCAL_PROTO }}://{{ IDP2_DOMAIN }}/simplesaml/saml2/idp/metadata.php"
      # HEXAA frontend:
      #- http://{{ LOCAL_DOMAIN }}:{{ LOCAL_PORT }}/Shibboleth.sso/Metadata
      - "{{ LOCAL_PROTO }}://{{ LOCAL_DOMAIN }}/Shibboleth.sso/Metadata"
      #- https://{{ LOCAL_DOMAIN }}:8443/simplesaml/module.php/aa/metadata.php
      - https://{{ LOCAL_DOMAIN }}:8443/simplesaml/module.php/aa/metadata.php

    SP1_DOMAIN: "sp1.{{ LOCAL_DOMAIN }}"
    SP2_DOMAIN: "sp2.{{ LOCAL_DOMAIN }}"
    SP1_ENTITY_ID: "{{ LOCAL_PROTO }}://{{ SP1_DOMAIN }}:{{ LOCAL_PORT }}/shibboleth"
    SP2_ENTITY_ID: "{{ LOCAL_PROTO }}://{{ SP2_DOMAIN }}:{{ LOCAL_PORT }}/shibboleth"
    SP_ATTRIBUTE_RESOLVERS: "<AttributeResolver type='SimpleAggregation' attributeId='principalName' format='urn:oid:1.3.6.1.4.1.5923.1.1.1.6'><Entity>{{ SSP_ENTITY_ID }}</Entity><Attribute Name='urn:oid:1.3.6.1.4.1.5923.1.1.1.7' NameFormat='urn:oasis:names:tc:SAML:2.0:attrname-format:uri' FriendlyName='eduPersonEntitlement'/></AttributeResolver>"

    HOSTS:
      hexaa.local: "{{ gateway_ip }}"
      idp1.hexaa.local: "{{ gateway_ip }}"
      idp2.hexaa.local: "{{ gateway_ip }}"
      sp1.hexaa.local: "{{ gateway_ip }}"
      sp2.hexaa.local: "{{ gateway_ip }}"

    PROXY_CERTIFICATE_PATH: "{{ playbook_dir }}/local_files/nginx-proxy"
  tasks:
    - name: Ensure network exists
      docker_network:
        name: "{{ item }}"
      with_items:
        - elknet
        - hexaa_env

    - set_fact:
        gateway_ip: "{{ docker_network.IPAM.Config[0].Gateway }}"

    - name: check if webserver cert exists
      stat:
        path: "{{ PROXY_CERTIFICATE_PATH }}/{{ LOCAL_DOMAIN }}.crt"
      register: webserver_cert

    - name: check if webserver privkey exists
      stat:
        path: "{{ PROXY_CERTIFICATE_PATH }}/{{ LOCAL_DOMAIN }}.key"
      register: webserver_privkey

    - name: Generate an OpenSSL private key with the default values (4096 bits, RSA)
      openssl_privatekey:
        path: "{{ PROXY_CERTIFICATE_PATH }}/{{ LOCAL_DOMAIN }}.key"
      when:
        - not webserver_privkey.stat.exists
    - name: Generate an OpenSSL Certificate Signing Request
      openssl_csr:
        path:             "{{ PROXY_CERTIFICATE_PATH }}/csr.csr"
        privatekey_path:  "{{ PROXY_CERTIFICATE_PATH }}/{{ LOCAL_DOMAIN }}.key"
        common_name:      "{{ LOCAL_DOMAIN }}"
        subject_alt_name: "DNS:*.{{ LOCAL_DOMAIN }}"
      when:
        - not webserver_cert.stat.exists
    - name: Generate a Self Signed OpenSSL certificate
      openssl_certificate:
        path:            "{{ PROXY_CERTIFICATE_PATH }}/{{ LOCAL_DOMAIN }}.crt"
        privatekey_path: "{{ PROXY_CERTIFICATE_PATH }}/{{ LOCAL_DOMAIN }}.key"
        csr_path:        "{{ PROXY_CERTIFICATE_PATH }}/csr.csr"
        provider: selfsigned
      when:
        - not webserver_cert.stat.exists

    - name: Ensure nginx-proxy container is started
      docker_container:
        name: nginx-proxy
        image: jwilder/nginx-proxy
        pull: true
        restart_policy: no
        ports:
          - "127.0.0.1:{{ LOCAL_PORT_HTTP }}:80"
          - "{{ gateway_ip }}:{{ LOCAL_PORT_HTTP }}:80"
          - "127.0.0.1:{{ LOCAL_PORT_HTTPS }}:443"
          - "{{ gateway_ip }}:{{ LOCAL_PORT_HTTPS }}:443"
        volumes:
          - /var/run/docker.sock:/tmp/docker.sock:ro
          - "{{ PROXY_CERTIFICATE_PATH if LOCAL_PROTO == 'https' else 'empty' }}:/etc/nginx/certs/:ro"

    - name: Start MailHog container
      docker_container:
        name: "mail.{{ LOCAL_DOMAIN }}"
        image: mailhog/mailhog:latest
        pull: true
        restart_policy: no
        ports:
          - "127.0.0.1:1025:1025"
          - "127.0.0.1:8025:8025"
        env:
          VIRTUAL_HOST: "mail.{{ LOCAL_DOMAIN }}"
          VIRTUAL_PORT: 8025
        networks:
          - name: "{{ docker_network_name_backend }}"
          - name: "{{ docker_network_name_frontend }}"

    - name: Ensure pyff config directory is available
      file:
        path: "{{ item }}"
        mode: 0755
        state: directory
      with_items:
        - "{{ DS_DATADIR }}/config"
        - "{{ DS_DATADIR }}/certs"
      tags: pyff
    - name: Ensure pyff config pipeline is available
      template:
        src: templates/mdx.fd.j2
        dest: "{{ DS_DATADIR }}/config/mdx.fd"
        mode: 0644
      vars:
        pyff_metadata: "{{ DS_METADATA_SOURCES }}"
        pyff_metadata_signing: no
        publisher: mdx.example.com  # TODO: what is this for?
      tags: pyff
    - name: Ensure pyff container is started
      docker_container:
        name: "metadata.{{ LOCAL_DOMAIN }}"
        image: leifj/pyff:latest
        pull: true
        restart: true
        restart_policy: no
        ports:
          - "127.0.0.1:8080:8080"
          - "127.0.0.1:8081:8080"
        volumes:
          - "{{ DS_DATADIR }}/config:/opt/pyff"
          - "{{ DS_DATADIR }}/certs:/opt/pyff/certs"
        env:
          VIRTUAL_HOST: "{{ VIRTUAL_HOST}}"
        networks:
          - name: hexaa_env
          - name: elknet
          - name: "{{ docker_network_name_backend }}"
          - name: "{{ docker_network_name_frontend }}"
        etc_hosts: "{{ HOSTS }}"
      vars:
        VIRTUAL_HOST: "{{ MDX_DOMAIN }}"
      tags:
        - pyff


    - name: Start IDP docker containers
      docker_container:
        name: "{{ item.name }}"
        image: szabogyula/test-saml-idp
        pull: true
        restart_policy: no
        env:
          VIRTUAL_HOST: "{{ item.name }}"
          #MDX_URL:      "{{ MDX_URL }}"
          MDX_URL:   "http://{{ MDX_DOMAIN }}:8080"
          SIMPLESAMLPHP_ADMIN_PASSWORD: "{{ SIMPLESAMLPHP_ADMIN_PASSWORD }}"
          SIMPLESAMLPHP_SECRET_SALT:    "{{ SIMPLESAMLPHP_SECRET_SALT }}"
        networks:
          - name: hexaa_env
        ports:
          - "127.0.0.1:{{ item.port }}:80"
        #command: "bash -c \" sed -Ei \\\"s/baseurl.+$/baseurl' => '{{ LOCAL_PROTO }}:\\/\\/{{ item.name }}:{{ LOCAL_PORT }}\\/simplesaml\\/',/\\\" /var/www/simplesamlphp/config/config.php; apache2-foreground\""
      tags: [idp]
      with_items: "{{ LOCAL_IDPS }}"


    - name: Start SP docker containers
      include_role:
        name: ansible-role-attributes

      vars:
        CONTAINER_NAME: "{{ item.name }}"
        BRAND:          "{{ item.name }}"
        VIRTUAL_HOST:   "{{ item.name }}"
        ENTITY_ID:      "{{ LOCAL_PROTO }}://{{ item.name }}/shibboleth"

        DISCOVERY_URL: "{{ LOCAL_PROTO }}://metadata.hexaa.local:{{ LOCAL_PORT }}/role/idp.ds"
        #DYNAMIC_METADATA_PROVIDER: "http://metadata.hexaa.local:{{ LOCAL_PORT }}/entities"
        DYNAMIC_METADATA_PROVIDER: "http://metadata.hexaa.local:8080/entities/"
        ATTRIBUTE_RESOLVERS:         "{{ SP_ATTRIBUTE_RESOLVERS }}"
        SUPPORT_CONTACT: "{{ item.name }}@{{ LOCAL_DOMAIN }}"
        SUPPORT_CONTACT_SURNAME: "{{ item.name }} support"
        NOSSL: true
        BEHIND_SSL_TERMINATOR_PROXY: "{{ LOCAL_PROTO == 'http' }}"
        METADATA_NOSSL_ENDPOINTS: "{{'' if LOCAL_PROTO == 'https' else true }}"
        LOGLEVEL: DEBUG
        ETC_HOSTS: "{{ HOSTS }}"
      with_items: "{{ LOCAL_SPS }}"
